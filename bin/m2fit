#!/usr/bin/env python
import warnings
import sys
from argparse import ArgumentParser
from pathlib import Path

from numpy import sqrt
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.pyplot as pl

from corner import corner
from muscat2ta.transitanalysis import TransitAnalysis
from muscat2ta.lpf import BaseLPF

if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('target', type=str)
    ap.add_argument('date', type=str)
    ap.add_argument('datadir', type=Path)
    ap.add_argument('tid', type=int)
    ap.add_argument('cids', type=int, nargs='+')
    ap.add_argument('--detrend-only', action='store_true', default=False)
    ap.add_argument('--npoly', type=int, default=10)
    ap.add_argument('--exptime', type=float, default=30.)
    ap.add_argument('--plot-dir', type=Path, default='.')
    ap.add_argument('--npop', default=100, type=int)
    ap.add_argument('--niter-od', default=30, type=int)
    ap.add_argument('--niter-de', default=500, type=int)
    ap.add_argument('--mc-nburn', default=500, type=int)
    ap.add_argument('--mc-niter', default=500, type=int)
    ap.add_argument('--mc-thin', default=5, type=int)
    ap.add_argument('--npasses', default=2, type=int)
    ap.add_argument('--model', default=BaseLPF.models[0], choices=BaseLPF.models)
    args = ap.parse_args()

    ta = TransitAnalysis(args.datadir, args.target, args.date, args.tid, args.cids, etime=args.exptime,
                         model=args.model)

    basename = '{}_{}_{}'.format(args.target, args.datadir.absolute().name, args.model)

    if args.detrend_only:
        ta.save_fits('linpoly', npoly=args.npoly)
    else:
        with PdfPages('{}.pdf'.format(basename)) as pdf:
            ta.optimize('linear', args.niter_de)
            ta.save_fits('linear')
            ta.learn_gp_hyperparameters()
            ta.optimize('gp', args.niter_de)
            ta.save_fits('gp')
            ta.sample('gp', args.mc_burn, thin=args.mc_thin)
            ta.sample('gp', args.mc_niter, thin=args.mc_thin, reset=True)
            #ta.print_ptp_scatter()
            ta.save()

            pdf.savefig(ta.plot_light_curve('linear', 'de', detrend_obs=False, detrend_mod=False, figsize=(14, 8)))
            pdf.savefig(ta.plot_light_curve('linear', 'de', detrend_obs=True,  detrend_mod=True,  figsize=(14, 8)))
            pdf.savefig(ta.plot_light_curve('gp', 'de',   detrend_obs=False, detrend_mod=False, figsize=(14, 8)))
            pdf.savefig(ta.plot_light_curve('gp', 'mcmc', detrend_obs=True,  detrend_mod=True,  figsize=(14, 8)))
            pdf.savefig(ta.plot_noise('bins'))

            df = ta.posterior_samples()
            if args.model == 'pb_independent_k':
                df['k'] = sqrt(df.k2)
                df.drop('k2', axis=1, inplace=True)
            elif args.model == 'pb_dependent_k':
                k2labels = 'k2_g k2_r k2_i k2_z'.split()
                for l in k2labels:
                    df[l.replace('k2','k')] = sqrt(df[l])
                    df.drop(l, axis=1, inplace=True)
            elif args.model == 'physical_contamination':
                df['cnt'] = 1. - df.k2_app / df.k2_true
                df['k_true'] = sqrt(df['k2_true'])
                df['k_app'] = sqrt(df['k2_app'])

            pdf.savefig(corner(df))