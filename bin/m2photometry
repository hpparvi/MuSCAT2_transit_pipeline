#!/usr/bin/env python

#  MuSCAT2 photometry and transit analysis pipeline
#  Copyright (C) 2019  Hannu Parviainen
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import logging

from argparse import ArgumentParser
from datetime import datetime, timedelta
from multiprocessing import Pool
from os import makedirs
from pathlib import Path

import xarray as xa
from astropy.io import fits as pf
from astropy.wcs.wcs import NoConvergence
from numpy import zeros, inf, array, c_, nan, full_like
from tqdm import tqdm

import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as pl

from muscat2ph.photometry import ScienceFrame, COMCentroider
from muscat2ph.catalog import get_m2_coords

passbands = 'g r i z_s'.split()

logging.basicConfig(level=logging.INFO)

def init(root, pb, stars_file, apertures, centroider_kwargs):
    isize = 1024
    global im, cc
    im = ScienceFrame(root, pb, aperture_radii=apertures)
    im.aperture_radii = apertures
    im.napt = len(apertures)
    im.load_reference_stars(stars_file)
    im._data = zeros((isize, isize))
    cc = COMCentroider(im, sids=centroider_kwargs['sids'], aperture_radius=centroider_kwargs['aperture_radius'])
    if not 'sids' in centroider_kwargs or centroider_kwargs['sids'] is None:
        cc.select_stars(20)

def photometry(filename):
    try:
        im.load_fits(filename)
        cc.calculate_and_apply()
        aux = [im._header['airmass'],
               im._header['exptime'],
               im._header['mjd-strt'] + 0.5 * im._header['exptime'] / 24 / 60 / 60]
        aux = xa.DataArray(aux, dims='quantity', coords={'quantity':'airmass exptime mjd'.split()})
        return im.photometry(centroid=False) + (aux,)
    except NoConvergence:
        return None

def create_datacube(filename):
    im.load_fits(filename)
    cc.calculate_and_apply()
    return im.get_aperture(5)


if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('datadir', type=str)
    ap.add_argument('--object', type=str, default=None)
    ap.add_argument('--passband', choices='g r i z_s all'.split(), default='all')
    ap.add_argument('--target-catalog-name', type=str, default=None)
    ap.add_argument('--result-dir', type=Path, default=None)
    ap.add_argument('--max-stars', type=int, default=15)
    ap.add_argument('--start-frame', type=int, default=0)
    ap.add_argument('--end-frame', type=int, default=inf)
    ap.add_argument('--with-wcs-only', action='store_true', default=False)
    ap.add_argument('--plot-only', action='store_false', dest='do_photometry', default=True)
    ap.add_argument('--n-processes', type=int, default=5)
    ap.add_argument('--chunksize', type=int, default=5)
    ap.add_argument('--border-margin', type=int, default=30)
    ap.add_argument('--save-stars', action='store_true', default=False)
    ap.add_argument('--create-dc', action='store_true', default=False)
    ap.add_argument('--apply-separation-cut', action='store_true', default=False)
    ap.add_argument('--separation-cut-distance', type=float, default=2.0)
    ap.add_argument('--tfop', action='store_true', default=False)
    ap.add_argument('--no-tfop', action='store_true', default=False)
    ap.add_argument('--find-mf', type=int, default=6)
    ap.add_argument('--find-treshold', type=float, default=99.5)
    ap.add_argument('--apertures', nargs='+', type=float, default=None)
    ap.add_argument('--cnt-aperture', type=float, default=25)
    ap.add_argument('--cnt-sids', type=int, nargs='+', default=None)
    ap.add_argument('--cnt-pmin', type=float, default=80)
    ap.add_argument('--cnt-pmax', type=float, default=95)
    args = ap.parse_args()

    root = Path(args.datadir)
    pbs = [args.passband] if args.passband != 'all' else 'r g i z_s'.split()
    target_sky_coords = None
    target_pix_coords = None

    objects = [args.object] if args.object else [o.name for o in list(root.joinpath('obj').glob('*'))]

    centroider_kwargs = dict(sids=args.cnt_sids, aperture_radius=args.cnt_aperture, pmin=args.cnt_pmin, pmax=args.cnt_pmax)

    # Do the photometry for all the targets
    # -------------------------------------
    for object in objects:
        max_stars = args.max_stars

        if not args.no_tfop and (args.tfop or 'toi' in object.lower() or 'tic' in object.lower()):
            logging.info(f"Calculating photometry for a TFOP target {object}.")
            apertures = (4, 8, 12, 16, 20)
            TFOP = True
        else:
            logging.info(f"Calculating photometry for {object}.")
            apertures = (6, 8, 12, 16, 20, 24, 30, 40, 50, 60)
            TFOP = False

        target_sky_coords = get_m2_coords(object)
        logging.info(f"Target sky coordinates {target_sky_coords}")

        if args.apertures is not None:
            apertures = args.apertures
        logging.info(f"Apertures {apertures}")

        all_files = {}
        for pb in pbs:
            ddir = root.joinpath('obj', object, pb)
            if ddir.exists():
                all_files[pb] = sorted(list(ddir.glob('MCT2?_*.fits')))
                logging.info(f"Found {len(all_files[pb])} fits files in {pb}.")

        if args.with_wcs_only:
            all_files = {pb : list(filter(lambda f: f.with_suffix('.wcs').exists(), all_files[pb])) for pb in all_files.keys()}
            for pb in pbs:
                if pb in all_files:
                    logging.info(f"{len(all_files[pb])} left in {pb} after wcs filtering")

        if sum([len(f) for f in all_files.values()]) == 0:
            logging.warning("No files to process")
            continue

        for k, it in all_files.items():
            if len(it) > 0:
                h = pf.getheader(it[0])
                break

        obsnight = datetime.strptime(h['date-obs'], '%Y-%m-%d')
        if h['MJD-STRT'] % 1 < 0.5:
            obsnight -= timedelta(1)

        if args.result_dir:
            rdir = Path(args.result_dir)
        else:
            rdir = Path('.').resolve().joinpath(object, obsnight.strftime('%y%m%d'))
            if not rdir.exists():
                makedirs(rdir)

        pbs = [pb for pb in pbs if pb in all_files]
        logging.info(f"Found passbands {pbs}")

        # Loop over passbands
        # -------------------
        stars_file = rdir.joinpath('{}_stars.fits'.format(object))
        for ipb, pb in enumerate(pbs):
            if pb not in all_files:
                continue
            files = all_files[pb]
            istart = max(0, args.start_frame)
            iend = min(args.end_frame, len(files))
            files = files[istart:iend]

            im = ScienceFrame(root, pb, aperture_radii=apertures)
            if target_sky_coords is not None:
                im._target_center = target_sky_coords
            im.load_fits(files[0])
            
            # Find, cut, save, and load the stars
            # -----------------------------------
            if (args.save_stars and ipb==0) or not stars_file.exists():
                im.find_stars(maxn=max_stars, target_sky=target_sky_coords, target_pix=target_pix_coords,
                              treshold=args.find_treshold, mf_size=args.find_mf)
                im.cut_margin(args.border_margin)
                if TFOP or args.apply_separation_cut:
                    im.cut_separation(target_sky_coords, args.separation_cut_distance)
                    im.remove_doubles(target_sky_coords, 0.1)
                im.save_reference_stars(stars_file)

            im.load_reference_stars(stars_file)
            if TFOP or args.apply_separation_cut:
                im.cut_separation(target_sky_coords, args.separation_cut_distance)
            
            cc = COMCentroider(im, None, aperture_radius=apertures[0])
            if not 'sids' in centroider_kwargs or centroider_kwargs['sids'] is None:
                cc.select_stars(20)
            cc.calculate_and_apply(pmin=args.cnt_pmin, pmax=args.cnt_pmax)

            # Field plot with apertures
            # -------------------------
            obsdate = root.absolute().name
            if im._wcs:
                for r in (None,5,2):
                    fig_field = pl.figure(figsize=(9, 9))
                    ax_field = fig_field.add_subplot(111, projection=im._wcs)
                    ax_field.grid()
                    im.plot_reduced(minp=90, offset=10, ax=ax_field, subfield_radius=r)
                    ax_field.set_title("Reference frame - {} {}'".format(object, pb))
                    pl.setp(ax_field, ylabel='Dec', xlabel='RA')
                    fig_field.subplots_adjust(bottom=0.03, top=0.98, left=0.13, right=0.98)
                    if r:
                        fig_field.savefig(str(rdir.joinpath('{}_20{}_MuSCAT2_{}_field_{:d}am.png'.format(object, obsdate, pb, r))))
                    else:
                        fig_field.savefig(str(rdir.joinpath('{}_20{}_MuSCAT2_{}_field.png'.format(object, obsdate, pb))))
            else:
                fig_field, ax_field = pl.subplots(figsize=(9, 9))
                im.plot_reduced(minp=90, offset=10, ax=ax_field)
                ax_field.set_title('Reference frame - {} {}'.format(object, pb))
                pl.setp(ax_field, ylabel='Y [pix]', xlabel='X [pix]')
                fig_field.subplots_adjust(bottom=0.03, top=0.98, left=0.13, right=0.98)
                fig_field.savefig(str(rdir.joinpath('{}_20{}_MuSCAT2_{}_field.png'.format(object, obsdate, pb))))

            fig_psf, _ = im.plot_psf(figsize=(9, 4.5))
            fig_psf.tight_layout()
            fig_psf.savefig(str(rdir.joinpath('{}_20{}_MuSCAT2_{}_seeing_profile.png'.format(object, obsdate, pb))))

            # Datacube creation
            # -----------------
            if args.create_dc:
                with Pool(processes=args.n_processes, initializer=init, initargs=(root, pb, stars_file, apertures,  centroider_kwargs)) as pool:
                    dc = array(list(tqdm(pool.imap(create_datacube, files, chunksize=args.chunksize), total=len(files))))
                    hdu = pf.PrimaryHDU(dc)
                    hdu.writeto(str(rdir.joinpath('{}_{}_{}-dc.fits'.format(object, obsdate, pb))), overwrite=True)

            # Photometry
            # ----------
            if args.do_photometry:
                with Pool(processes=args.n_processes, initializer=init, initargs=(root, pb, stars_file, apertures, centroider_kwargs)) as pool:
                    result = list(tqdm(pool.imap(photometry, files, chunksize=args.chunksize), total=len(files), desc='Photometry for {}'.format(pb)))
                result = list(filter(lambda r:r is not None, result))

                aux  = xa.concat([r[5] for r in result], 'frame')
                ctime = xa.IndexVariable('mjd', aux.loc[:,'mjd'])
                flux = xa.concat([r[0] for r in result], 'mjd').assign_coords(mjd = ctime)
                msky = xa.concat([r[1] for r in result], 'mjd').assign_coords(mjd = ctime)
                eobj = xa.concat([r[2] for r in result], 'mjd').assign_coords(mjd = ctime)
                esky = xa.concat([r[3] for r in result], 'mjd').assign_coords(mjd = ctime)
                cpos = xa.concat([r[4] for r in result], 'mjd').assign_coords(mjd = ctime)

                cpix = xa.DataArray(im._ref_centroids_pix,
                                    name='centroids_pix',
                                    dims='star centroid_pix'.split(),
                                    coords={'centroid_pix': ['x', 'y']})

                if im._ref_centroids_sky is not None:
                    ca = c_[im._ref_centroids_sky.ra.deg, im._ref_centroids_sky.dec.deg]
                else:
                    ca = full_like(array(cpix), nan)

                csky = xa.DataArray(ca,
                                    name='centroids_sky',
                                    dims='star centroid_sky'.split(),
                                    coords={'centroid_sky': ['ra', 'dec']})

                ds = xa.Dataset(dict(flux=flux, obj_entropy=eobj, sky_median=msky, sky_entropy=esky, centroid=cpos,
                                     aux=aux, centroids_pix=cpix, centroids_sky=csky))
                ds.to_netcdf(str(rdir.joinpath('{}_{}_{}.nc'.format(object, obsdate, pb))))
