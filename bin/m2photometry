#!/usr/bin/env python

#  MuSCAT2 photometry and transit analysis pipeline
#  Copyright (C) 2019  Hannu Parviainen
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import logging

from argparse import ArgumentParser
from datetime import datetime, timedelta
from multiprocessing import Pool
from os import makedirs
from pathlib import Path

import xarray as xa
from astropy.io import fits as pf
from astropy.wcs.wcs import NoConvergence
from numpy import zeros, inf, array, c_, nan, full_like, float32
from tqdm import tqdm

import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as pl

from muscat2ph.photometry import ScienceFrame, COMCentroider
from muscat2ph.catalog import get_m2_coords, get_toi, get_toi_or_tic_coords, get_coords

from astropy.utils.exceptions import AstropyDeprecationWarning
import warnings
warnings.filterwarnings("error", category=AstropyDeprecationWarning)

passbands = 'g r i z_s'.split()

logging.basicConfig(level=logging.INFO)

def init(root, pb, stars_file, apertures, centroider_kwargs, dc_obj_id=0, dc_apt_id=0):
    isize = 1024
    global im, cc, dcoid, dcaid, cc_pmin, cc_pmax
    im = ScienceFrame(root, pb, aperture_radii=apertures)
    im.aperture_radii = apertures
    im.napt = len(apertures)
    im.load_reference_stars(stars_file)
    im._data = zeros((isize, isize))
    cc = COMCentroider(im, sids=centroider_kwargs['sids'], aperture_radius=centroider_kwargs['aperture_radius'])
    cc_pmin, cc_pmax = centroider_kwargs['pmin'], centroider_kwargs['pmax']
    if not 'sids' in centroider_kwargs or centroider_kwargs['sids'] is None:
        cc.select_stars(20)
    dcoid = dc_obj_id
    dcaid = dc_apt_id

def photometry(filename):
    try:
        im.load_fits(filename)
        cc.calculate_and_apply(pmin=cc_pmin, pmax=cc_pmax)
        aux = [im._header['airmass'],
               im._header['exptime'],
               im._header['mjd-strt'] + 0.5 * im._header['exptime'] / 24 / 60 / 60]
        aux = xa.DataArray(aux, dims='quantity', coords={'quantity':'airmass exptime mjd'.split()})
        return im.photometry(centroid=False) + (aux,)
    except NoConvergence:
        return None

def create_datacube(filename):
    im.load_fits(filename)
    cc.calculate_and_apply(pmin=cc_pmin, pmax=cc_pmax)
    return im.get_aperture(dcaid, dcoid)


if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('datadir', type=str)
    ap.add_argument('--object', type=str, default=None)
    ap.add_argument('--passband', choices='g r i z_s all'.split(), default='all')
    ap.add_argument('--target-catalog-name', type=str, default=None)
    ap.add_argument('--result-dir', type=Path, default=None)
    ap.add_argument('--max-stars', type=int, default=15)
    ap.add_argument('--start-frame', type=int, default=0)
    ap.add_argument('--end-frame', type=int, default=inf)
    ap.add_argument('--with-wcs-only', action='store_true', default=False)
    ap.add_argument('--plot-only', action='store_false', dest='do_photometry', default=True)
    ap.add_argument('--n-processes', type=int, default=5)
    ap.add_argument('--chunksize', type=int, default=5)
    ap.add_argument('--border-margin', type=int, default=30)
    ap.add_argument('--save-stars', action='store_true', default=False)
    ap.add_argument('--create-dc', action='store_true', default=False)
    ap.add_argument('--dc-obj-id', type=int, default=0)
    ap.add_argument('--dc-apt-id', type=int, default=0)
    ap.add_argument('--apply-separation-cut', action='store_true', default=False)
    ap.add_argument('--separation-cut-distance', type=float, default=2.0)
    ap.add_argument('--double-removal-distance', type=float, default=0.1)
    ap.add_argument('--tfop', action='store_true', default=False)
    ap.add_argument('--no-tfop', action='store_true', default=False)
    ap.add_argument('--find-mf', type=int, default=6)
    ap.add_argument('--find-treshold', type=float, default=None)
    ap.add_argument('--apertures', nargs='+', type=float, default=None)
    ap.add_argument('--cnt-aperture', type=float, default=25)
    ap.add_argument('--cnt-sids', type=int, nargs='+', default=None)
    ap.add_argument('--cnt-pmin', type=float, default=80)
    ap.add_argument('--cnt-pmax', type=float, default=95)
    args = ap.parse_args()

    root = Path(args.datadir)
    obsdate = root.absolute().name
    pbs = [args.passband] if args.passband != 'all' else 'r g i z_s'.split()
    target_sky_coords = None
    target_pix_coords = None
    centroider_kwargs = dict(sids=args.cnt_sids, aperture_radius=args.cnt_aperture, pmin=args.cnt_pmin, pmax=args.cnt_pmax)

    # Find objects
    # ------------
    if args.object:
        objects = [args.object]
    else:
        objects = [o.name for o in list(root.joinpath('obj').glob('*'))]
    logging.info(f'Objects: {objects}')

    # Do the photometry for all the targets
    # -------------------------------------
    for object in objects:
        max_stars = args.max_stars

        catalog_name = args.target_catalog_name or object

        try:
            toi = get_toi(catalog_name)
        except ValueError:
            toi = None

        find_treshold = args.find_treshold
        if not args.no_tfop and toi is not None:
            logging.info(f"Calculating photometry for a TFOP target {catalog_name} (TIC {toi.tic}).")
            find_treshold = find_treshold or 97.5
            max_stars = max_stars or 150
            ticname = 'TIC{:d}-{}'.format(int(toi.tic), str(toi.toi).split('.')[1])
            TFOP = True
        else:
            logging.info(f"Calculating photometry for {catalog_name}.")
            find_treshold = find_treshold or 99.
            max_stars = max_stars or 20
            TFOP = False

        target_sky_coords = get_coords(catalog_name)
        logging.info(f"Target sky coordinates {target_sky_coords}")

        if args.apertures is None:
            apertures = (4, 6, 8, 10, 12, 14, 16, 18, 20, 23, 27, 32)
        else:
            apertures = args.apertures
        logging.info(f"Apertures {apertures}")

        all_files = {}
        files_with_wcs = {}
        for pb in pbs:
            ddir = root.joinpath('obj', object, pb)
            if ddir.exists():
                all_files[pb] = sorted(list(ddir.glob('MCT2?_*.fits')))
                istart = max(0, args.start_frame)
                iend = min(args.end_frame, len(all_files[pb]))
                all_files[pb] = all_files[pb][istart:iend]
                files_with_wcs[pb] = list(filter(lambda f: f.with_suffix('.wcs').exists(), all_files[pb]))
                logging.info(f"Found {len(all_files[pb])} fits files ({len(files_with_wcs[pb])} with wcs) in the {pb}-band.")

        if args.with_wcs_only:
            all_files = files_with_wcs

        if sum([len(f) for f in all_files.values()]) == 0:
            logging.warning("No files to process")
            continue

        for k, it in all_files.items():
            if len(it) > 0:
                h = pf.getheader(it[0])
                break

        obsnight = datetime.strptime(h['date-obs'], '%Y-%m-%d')
        if h['MJD-STRT'] % 1 < 0.5:
            obsnight -= timedelta(1)

        if args.result_dir:
            rdir = Path(args.result_dir)
        else:
            rdir = Path('.').resolve().joinpath(object, obsnight.strftime('%y%m%d'))
            if not rdir.exists():
                makedirs(rdir)

        pbs = [pb for pb in pbs if pb in all_files]
        logging.info(f"Found passbands {pbs}")

        # Loop over passbands
        # -------------------
        stars_file = rdir.joinpath('{}_stars.fits'.format(object))
        for ipb, pb in enumerate(pbs):
            files = all_files[pb]

            im = ScienceFrame(root, pb, aperture_radii=apertures)
            if target_sky_coords is not None:
                im._target_center = target_sky_coords

            if toi is not None:
                fits_name = f'{ticname}_20{obsdate}_MuSCAT2_{pb}_frame.fits'
            else:
                fits_name = f'{object}_20{obsdate}_MuSCAT2_{pb}_frame.fits'

            if len(files_with_wcs[pb]) > 0:
                f = files_with_wcs[pb][0]
                im.load_fits(f)
                header = im._header.copy()
                header.append(('COMMENT', '*********************'))
                header.append(('COMMENT', '  WCS '))
                header.append(('COMMENT', '*********************'))
                with pf.open(f.with_suffix('.wcs')) as f2:
                    header.extend(f2[0].header, unique=True, bottom=True)
                hdu = pf.PrimaryHDU(im.reduced, header=header)
                hdu.writeto(rdir.joinpath(fits_name), overwrite=True)
            else:
                im.load_fits(files[0])
                hdu = pf.PrimaryHDU(im.reduced, header=im._header)
                hdu.writeto(rdir.joinpath(fits_name), overwrite=True)

            logging.info(f'Wrote an example fits-frame {fits_name}')

            # Find, cut, save, and load the stars
            # -----------------------------------
            if (args.save_stars and ipb==0) or not stars_file.exists():
                logging.info("Searching for stars")
                im.find_stars(maxn=max_stars, target_sky=target_sky_coords, target_pix=target_pix_coords,
                              treshold=find_treshold, mf_size=args.find_mf)
                im.cut_margin(args.border_margin)
                if TFOP or args.apply_separation_cut:
                    im.cut_separation(target_sky_coords, args.separation_cut_distance)
                    im.remove_doubles(target_sky_coords, args.double_removal_distance)
                    logging.info(f"Applying separation cut and double removal: {im.nstars} left")
                im.save_reference_stars(stars_file)

            im.load_reference_stars(stars_file)
            if TFOP or args.apply_separation_cut:
                im.cut_separation(target_sky_coords, args.separation_cut_distance)

            cc = COMCentroider(im, None, aperture_radius=apertures[0])
            if not 'sids' in centroider_kwargs or centroider_kwargs['sids'] is None:
                cc.select_stars(20)
            cc.calculate_and_apply(pmin=args.cnt_pmin, pmax=args.cnt_pmax)

            # Field plot with apertures
            # -------------------------
            if im._wcs:
                for r in (None,5,2):
                    fig_field = pl.figure(figsize=(9, 9))
                    ax_field = fig_field.add_subplot(111, projection=im._wcs)
                    ax_field.grid()
                    im.plot_reduced(minp=90, offset=10, ax=ax_field, subfield_radius=r)
                    ax_field.set_title(f"Reference frame - {catalog_name} {pb}'")
                    pl.setp(ax_field, ylabel='Dec', xlabel='RA')
                    fig_field.subplots_adjust(bottom=0.03, top=0.98, left=0.13, right=0.98)
                    if r:
                        fig_field.savefig(str(rdir.joinpath(f"{object}_20{obsdate}_MuSCAT2_{pb}_field_{r:d}am.png")))
                    else:
                        fig_field.savefig(str(rdir.joinpath(f"{object}_20{obsdate}_MuSCAT2_{pb}_field.png")))
                    pl.close(fig_field)
            else:
                fig_field, ax_field = pl.subplots(figsize=(9, 9))
                im.plot_reduced(minp=90, offset=10, ax=ax_field)
                ax_field.set_title(f"Reference frame - {object} {pb}")
                pl.setp(ax_field, ylabel='Y [pix]', xlabel='X [pix]')
                fig_field.subplots_adjust(bottom=0.03, top=0.98, left=0.13, right=0.98)
                fig_field.savefig(str(rdir.joinpath(f"{object}_20{obsdate}_MuSCAT2_{pb}_field.png")))
                pl.close(fig_field)

            fig_psf, _ = im.plot_psf(figsize=(9, 4.5))
            fig_psf.tight_layout()
            fig_psf.savefig(str(rdir.joinpath(f"{object}_20{obsdate}_MuSCAT2_{pb}_seeing_profile.png")))
            pl.close(fig_psf)

            # Datacube creation
            # -----------------
            if args.create_dc:
                with Pool(processes=args.n_processes,
                          initializer=init, initargs=(root, pb, stars_file, apertures,  centroider_kwargs, args.dc_obj_id, args.dc_apt_id)) as pool:
                    dc = array(list(tqdm(pool.imap(create_datacube, files, chunksize=args.chunksize), total=len(files),desc='Creating a datacube'))).astype(float32)
                    hdu = pf.PrimaryHDU(dc)
                    hdu.writeto(str(rdir.joinpath('{}_{}_{}-dc.fits'.format(object, obsdate, pb))), overwrite=True)

            # Photometry
            # ----------
            if args.do_photometry:
                with Pool(processes=args.n_processes, initializer=init, initargs=(root, pb, stars_file, apertures, centroider_kwargs)) as pool:
                    result = list(tqdm(pool.imap(photometry, files, chunksize=args.chunksize), total=len(files), desc='Photometry for {}'.format(pb)))
                result = list(filter(lambda r:r is not None, result))

                aux  = xa.concat([r[5] for r in result], 'frame')
                ctime = xa.IndexVariable('mjd', aux.loc[:,'mjd'])
                flux = xa.concat([r[0] for r in result], 'mjd').assign_coords(mjd = ctime)
                msky = xa.concat([r[1] for r in result], 'mjd').assign_coords(mjd = ctime)
                eobj = xa.concat([r[2] for r in result], 'mjd').assign_coords(mjd = ctime)
                esky = xa.concat([r[3] for r in result], 'mjd').assign_coords(mjd = ctime)
                cpos = xa.concat([r[4] for r in result], 'mjd').assign_coords(mjd = ctime)

                cpix = xa.DataArray(im._ref_centroids_pix,
                                    name='centroids_pix',
                                    dims='star centroid_pix'.split(),
                                    coords={'centroid_pix': ['x', 'y']})

                if im._ref_centroids_sky is not None:
                    ca = c_[im._ref_centroids_sky.ra.deg, im._ref_centroids_sky.dec.deg]
                else:
                    ca = full_like(array(cpix), nan)

                csky = xa.DataArray(ca,
                                    name='centroids_sky',
                                    dims='star centroid_sky'.split(),
                                    coords={'centroid_sky': ['ra', 'dec']})

                ds = xa.Dataset(dict(flux=flux, obj_entropy=eobj, sky_median=msky, sky_entropy=esky, centroid=cpos,
                                     aux=aux, centroids_pix=cpix, centroids_sky=csky))
                ds.to_netcdf(str(rdir.joinpath('{}_{}_{}.nc'.format(object, obsdate, pb))))
