#!/usr/bin/env python

#  MuSCAT2 photometry and transit analysis pipeline
#  Copyright (C) 2020  Hannu Parviainen
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
import json
import logging
import warnings

from argparse import ArgumentParser
from os import makedirs
from pathlib import Path

from astropy.io import fits as pf
from astropy.utils.exceptions import AstropyDeprecationWarning
from numpy import seterr

import matplotlib as mpl

from muscat2ph.centroider import COMCentroider, DFCOMCentroider

mpl.use('Agg')
import matplotlib.pyplot as pl

from muscat2ph.photometry import ScienceFrame
from muscat2ph.catalog import get_toi, get_coords
from muscat2ph.m2obsnight import M2ObservationNight, M2ObservationData

warnings.filterwarnings("error", category=AstropyDeprecationWarning)
seterr(invalid='ignore')

logger = logging.getLogger('m2mkref')
logging.basicConfig(level=logging.INFO)

passbands = 'g r i z_s'.split()

if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('datadir', type=Path)
    ap.add_argument('--object', type=str, default=None)
    ap.add_argument('--passband', nargs='+', type=str, default=['i', 'r', 'z_s', 'g'])
    ap.add_argument('--target-catalog-name', type=str, default=None)
    ap.add_argument('--result-dir', type=Path, default=None)
    ap.add_argument('--max-stars', type=int, default=15)
    ap.add_argument('--frame', type=int, default=0)
    ap.add_argument('--with-wcs-only', action='store_true', default=False)
    ap.add_argument('--border-margin', type=int, default=30)
    ap.add_argument('--save-stars', action='store_true', default=False)
    ap.add_argument('--apply-separation-cut', action='store_true', default=False)
    ap.add_argument('--separation-cut-distance', type=float, default=2.0)
    ap.add_argument('--double-removal-distance', type=float, default=0.1)
    ap.add_argument('--find-method', choices=['gaia', 'dao', 'defoc'], type=str, default=None)
    ap.add_argument('--find-mf', type=int, default=6)
    ap.add_argument('--find-treshold', type=float, default=99.5)
    ap.add_argument('--find-dao-fwhm', type=float, default=6.0)
    ap.add_argument('--min-fratio', type=float, default=0.005)
    ap.add_argument('--apertures', nargs='+', type=float, default=[4, 7, 10, 13, 16, 19, 22, 25])
    ap.add_argument('--cnt-aperture', type=float, default=25)
    ap.add_argument('--cnt-sids', type=int, nargs='+', default=None)
    ap.add_argument('--cnt-pmin', type=float, default=80)
    ap.add_argument('--cnt-pmax', type=float, default=95)
    ap.add_argument('--cnt-refine', type=int, nargs='+', default=None)
    ap.add_argument('--centroider', type=str, choices=['com', 'defocus'], default='com')
    ap.add_argument('--dont-use-gaia', dest='use_gaia', action='store_false', default=True)
    ap.add_argument('--ignore-wcs', dest='use_wcs', action='store_false', default=True)
    args = ap.parse_args()

    on = M2ObservationNight(args.datadir, args.object, args.passband)

    target_sky_coords = None
    target_pix_coords = None
    max_stars = args.max_stars
    apertures = args.apertures

    logging.info(f"Apertures {args.apertures}")

    # Do the photometry for all the targets
    # -------------------------------------
    for object in on.objects:
        od = M2ObservationData(on, object)

        catalog_name = args.target_catalog_name or object
        target_sky_coords = get_coords(catalog_name, on.date)
        logging.info(f"Target sky coordinates {target_sky_coords}")

        if args.result_dir:
            rdir = Path(args.result_dir)
        else:
            rdir = Path('.').resolve() / object / on.night
            if not rdir.exists():
                makedirs(rdir)
        logging.info(f"Result directory: {rdir}")

        stars_file = rdir / f'{object}_stars.csv'

        for ipb, pb in enumerate(od.pbs):
            im = ScienceFrame(on.root, pb, aperture_radii=apertures, use_wcs=args.use_wcs)
            if target_sky_coords is not None:
                im._target_center = target_sky_coords

            if args.use_wcs and len(od.files_with_wcs[pb]) > 0:
                ref_file = od.files_with_wcs[pb][args.frame]
            else:
                ref_file = od.files[pb][args.frame]

            fits_name = f'{object}_{on.night}_MuSCAT2_{pb}_frame.fits'
            if args.use_wcs and len(od.files_with_wcs[pb]) > 0:
                im.load_fits(ref_file)
                header = im._header.copy()
                header.append(('COMMENT', '*********************'))
                header.append(('COMMENT', '  WCS '))
                header.append(('COMMENT', '*********************'))
                with pf.open(ref_file.with_suffix('.wcs')) as f2:
                    header.extend(f2[0].header, unique=True, bottom=True)
                hdu = pf.PrimaryHDU(im.reduced, header=header)
                hdu.writeto(rdir.joinpath(fits_name), overwrite=True)
            else:
                im.load_fits(ref_file)
                hdu = pf.PrimaryHDU(im.reduced, header=im._header)
                hdu.writeto(rdir.joinpath(fits_name), overwrite=True)
            logging.info(f'Wrote an example fits-frame {fits_name}')

            # Find, cut, save, and load the stars
            # -----------------------------------
            if ipb == 0:
                find_method = args.find_method
                method_kwargs = {}
                if find_method is None:
                    if args.use_gaia and len(od.files_with_wcs[pb]) > 0:
                        find_method = 'gaia'
                    else:
                        find_method = 'dao'

                if find_method == 'gaia':
                    method_kwargs = dict(radius=11, min_flux_ratio=args.min_fratio)
                elif find_method == 'dao':
                    method_kwargs = dict(fwhm=args.find_dao_fwhm)
                else:
                    method_kwargs = dict(treshold=args.find_treshold, mf_size=args.find_mf)

                im.find_reference_stars(ref_file, find_method, target_sky_coords, target_pix_coords, max_stars,
                                        method_kwargs, args.border_margin, args.apply_separation_cut,
                                        args.separation_cut_distance, args.double_removal_distance,
                                        args.cnt_sids, args.cnt_refine, args.cnt_aperture,
                                        stars_file)

                parameters = {'ref_file':str(ref_file), 'apertures': args.apertures}
                with open(rdir / 'parameters.json', 'w') as f:
                    json.dump(parameters, f)

            logger.info(f"Reading stars")
            im.load_reference_stars(stars_file)

            if not args.use_wcs and pb == 'g':
                im._ref_centroids_pix[:,1] += 100
                im._cur_centroids_pix[:,1] += 100

            if args.centroider == 'com':
                im.centroider = COMCentroider(im.centroid_star_ids.size, args.cnt_aperture)
            else:
                im.centroider = DFCOMCentroider(im.centroid_star_ids.size, args.cnt_aperture)
            im.centroid()

            # Field plot with apertures
            # -------------------------
            if im._wcs:
                for r in (None,5,2):
                    fig_field = pl.figure(figsize=(9, 9))
                    ax_field = fig_field.add_subplot(111, projection=im._wcs)
                    ax_field.grid()
                    im.plot_reduced(minp=90, offset=10, ax=ax_field, subfield_radius=r)
                    ax_field.set_title(f"Reference frame - {catalog_name} {pb}'")
                    pl.setp(ax_field, ylabel='Dec', xlabel='RA')
                    fig_field.subplots_adjust(bottom=0.03, top=0.98, left=0.13, right=0.98)
                    if r:
                        fig_field.savefig(str(rdir.joinpath(f"{object}_{on.night}_MuSCAT2_{pb}_field_{r:d}am.png")))
                    else:
                        fig_field.savefig(str(rdir.joinpath(f"{object}_{on.night}_MuSCAT2_{pb}_field.png")))
                    pl.close(fig_field)
            else:
                fig_field, ax_field = pl.subplots(figsize=(9, 9))
                im.plot_reduced(minp=90, offset=10, ax=ax_field)
                ax_field.set_title(f"Reference frame - {object} {pb}")
                pl.setp(ax_field, ylabel='Y [pix]', xlabel='X [pix]')
                fig_field.subplots_adjust(bottom=0.03, top=0.98, left=0.13, right=0.98)
                fig_field.savefig(str(rdir.joinpath(f"{object}_{on.night}_MuSCAT2_{pb}_field.png")))
                pl.close(fig_field)

            fig_psf, _ = im.plot_psf(figsize=(9, 4.5))
            fig_psf.tight_layout()
            fig_psf.savefig(str(rdir.joinpath(f"{object}_{on.night}_MuSCAT2_{pb}_seeing_profile.png")))
            pl.close(fig_psf)

