#!/usr/bin/env python

#  MuSCAT2 photometry and transit analysis pipeline
#  Copyright (C) 2019  Hannu Parviainen
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import logging
import re
from argparse import ArgumentParser
from multiprocessing import Pool
from os import remove, chdir
from pathlib import Path
from subprocess import run, PIPE, TimeoutExpired

import pandas as pd
from astropy.io import fits as pf
from numpy import nan, inf
from tqdm import tqdm

from muscat2ph.catalog import get_m2_coords

TMPEXTS = ".match .axy .rdls .solved -indx.xyls .corr".split()
MAX_TIMEOUT = 60


def run_astrometry(filename, overwrite=True):
    object = pf.getval(filename, 'object').lower()
    sc = get_m2_coords(object)

    logging.info(" Solving {} {} - RA: {:6.3f} DEC: {:6.3f}".format(filename.stem, object, sc.ra.deg, sc.dec.deg))

    astcall = ["solve-field", "--overwrite", "--no-plots", "--scale-low=0.3", "--scale-high=0.7", "--scale-units=app",
               "--new-fits=none", "--fits-image", "--ra={}".format(sc.ra.deg), "--dec={}".format(sc.dec.deg), "--radius=2",
               str(filename)]

    try:
        r = run(astcall, stdout=PIPE, stderr=PIPE, timeout=MAX_TIMEOUT)
        rout = r.stdout.decode()
    except TimeoutExpired:
        return str(filename), nan, nan, nan

    for ext in TMPEXTS:
        try:
            remove(filename.parent.joinpath(filename.stem + ext))
        except FileNotFoundError:
            pass

    try:
        center = list(map(float, re.findall('Field center: \(RA,Dec\) = \((.*),(.*)\)', rout)[0]))
        rotation = float(re.findall('Field rotation .* is (.*?) .*', rout)[0])
        logging.info(" Solved  {} {} - RA: {:6.3f} DEC: {:6.3f} Rotation: {:6.3f}".format(filename.stem, object, center[0], center[1], rotation))
        return str(filename), center[0], center[1], rotation
    except IndexError:
        logging.info(" Failed to solve {} {}".format(filename.stem, object))
        return str(filename), nan, nan, nan


def process_datadir(datadir, logdir, file_prefix, file_postfix, start_frame, end_frame):
    files = sorted(list(datadir.rglob("%s*%s"%(file_prefix, file_postfix))))
    istart = max(0, start_frame)
    iend = min(end_frame, len(files))
    files = files[istart:iend]
    f = files[0].absolute()

    target = str(f.parts[-3])
    pb = str(f.parts[-2])

    logging.basicConfig(filename=logdir.joinpath('00_m2astrometry_{}_{}.log'.format(target, pb)),
                        filemode='w', level=logging.DEBUG)

    with Pool(args.n_processes) as p:
        r = list(tqdm(p.imap(run_astrometry, files), total=len(files),
                      desc='Solving astrometry for {} {}'.format(target, pb)))
        df = pd.DataFrame(r, columns='filename RA Dec rotation'.split())

    dfname = '01_m2astrometry_{}_{}.csv'.format(target, pb)
    df.to_csv(logdir.joinpath(dfname), index=False)


if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('--root', type=Path, default=Path('.').absolute())
    ap.add_argument('--directory', type=Path, default=None)
    ap.add_argument('-n', '--n-processes', type=int, default=6)
    ap.add_argument('-f', '--overwrite', action='store_true', default=False)
    ap.add_argument('--file-prefix', type=str, default='MCT2')
    ap.add_argument('--file-postfix', type=str, default='.fits')
    ap.add_argument('--start-frame', type=int, default=0)
    ap.add_argument('--end-frame', type=int, default=inf)
    args = ap.parse_args()

    if args.directory is not None:
        process_datadir(args.directory, args.directory, args.file_prefix, args.file_postfix, args.start_frame, args.end_frame)
    else:
        passbands = 'g r i z_s'.split()

        curdir = Path('.').absolute()
        objdir = args.root.joinpath('obj')

        if objdir.exists():
            targets = list(objdir.glob('*'))
            for tdir in targets:
                chdir(tdir.absolute())
                for pb in passbands:
                    datadir = tdir.joinpath(pb)
                    if datadir.exists():
                        process_datadir(datadir, tdir, args.file_prefix, args.file_postfix, args.start_frame, args.end_frame)
            chdir(curdir)
        else:
            print('Error: Could not find "obj" directory.')
