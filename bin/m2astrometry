#!/usr/bin/env python

import warnings
import logging
import re
import numpy as np
import pandas as pd

from os import remove, chdir
from itertools import repeat
from numpy import nan, inf, array
from multiprocessing import Pool
from subprocess import run, PIPE, TimeoutExpired
from pathlib import Path
from argparse import ArgumentParser

from astropy.io import fits as pf
from astropy.utils.exceptions import AstropyWarning
from astropy.coordinates import SkyCoord
import astropy.units as u
from astroquery.simbad import Simbad

from tqdm import tqdm

TMPEXTS = ".match .axy .rdls .solved -indx.xyls .corr".split()
MAX_TIMEOUT = 60

def run_astrometry(filename, overwrite=True):
    pradec = Path('radec.csv')
    if pradec.exists():
        with open(pradec, 'r') as f:
            radec = f.readline()
        ra, dec = list(map(lambda s: s.strip().replace(' ', ':'), radec.split(',')))
    else:
        h = pf.getheader(filename)
        ra, dec = h['ra'], h['dec']

    astcall = ["solve-field", "--overwrite", "--no-plots", "--scale-low=0.3", "--scale-high=0.7", "--scale-units=app",
               "--new-fits=none", "--fits-image"]

    if ra and dec:
        astcall.extend(["--ra=%s"%ra, "--dec=%s"%dec, "--radius=2"])
        logging.info("%s -- Found RA and Dec from the header (%s, %s)", filename.stem, ra, dec)
    else:
        logging.info("%s -- No RA and Dec info in the header", filename.stem)
    astcall.append(str(filename))

    try:
        r = run(astcall, stdout=PIPE, stderr=PIPE, timeout=MAX_TIMEOUT)
        rout = r.stdout.decode()
    except TimeoutExpired:
        return str(filename), nan, nan, nan

    for ext in TMPEXTS:
        try:
            remove(filename.parent.joinpath(filename.stem + ext))
        except FileNotFoundError:
            pass

    try:
        center = list(map(float, re.findall('Field center: \(RA,Dec\) = \((.*),(.*)\)', rout)[0]))
        rotation = float(re.findall('Field rotation .* is (.*?) .*', rout)[0])
        return str(filename), center[0], center[1], rotation
    except IndexError:
        return str(filename), nan, nan, nan


def process_datadir(datadir, logdir, file_prefix, file_postfix, start_frame, end_frame):
    files = sorted(list(datadir.rglob("%s*%s"%(file_prefix, file_postfix))))
    istart = max(0, start_frame)
    iend = min(end_frame, len(files))
    files = files[istart:iend]
    f = files[0].absolute()

    target = str(f.parts[-3])
    pb = str(f.parts[-2])

    obj = Simbad.query_object(pf.getval(f, 'object'))
    if obj is not None:
        with open('radec.csv', 'w') as radec:
            radec.write('{}, {}\n'.format(obj['RA'][0], obj['DEC'][0]))

    logging.basicConfig(filename=logdir.joinpath('00_m2astrometry_{}_{}.log'.format(target, pb)),
                        filemode='w', level=logging.DEBUG)

    with Pool(args.n_processes) as p:
        r = list(tqdm(p.imap(run_astrometry, files), total=len(files),
                      desc='Solving astrometry for {} {}'.format(target, pb)))
        df = pd.DataFrame(r, columns='filename RA Dec rotation'.split())

    dfname = '01_m2astrometry_{}_{}.csv'.format(target, pb)
    df.to_csv(logdir.joinpath(dfname), index=False)


if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('--root', type=Path, default=Path('.').absolute())
    ap.add_argument('-n', '--n-processes', type=int, default=6)
    ap.add_argument('-f', '--overwrite', action='store_true', default=False)
    ap.add_argument('--file-prefix', type=str, default='MCT2')
    ap.add_argument('--file-postfix', type=str, default='.fits')
    ap.add_argument('--start-frame', type=int, default=0)
    ap.add_argument('--end-frame', type=int, default=inf)
    args = ap.parse_args()

    passbands = 'g r i z_s'.split()

    curdir = Path('.').absolute()
    objdir = args.root.joinpath('obj')

    if objdir.exists():
        targets = list(objdir.glob('*'))
        for tdir in targets:
            chdir(tdir.absolute())
            for pb in passbands:
                datadir = tdir.joinpath(pb)
                process_datadir(datadir, tdir, args.file_prefix, args.file_postfix, args.start_frame, args.end_frame)
        chdir(curdir)
    else:
        print('Error: Could not find "obj" directory.')
